{"version":3,"sources":["../app.js"],"names":["express","require","path","favicon","logger","cookieParser","bodyParser","passport","mongoose","config","autoIncrement","index","users","auth","app","options","promiseLibrary","useMongoClient","Promise","global","connect","db","url","then","console","log","catch","err","error","use","initialize","session","set","join","__dirname","json","urlencoded","extended","static","req","res","next","Error","status","locals","message","get","render","module","exports"],"mappings":";;AAAA,IAAIA,UAAgBC,QAAQ,SAAR,CAApB;AACA,IAAIC,OAAgBD,QAAQ,MAAR,CAApB;AACA,IAAIE,UAAgBF,QAAQ,eAAR,CAApB;AACA,IAAIG,SAAgBH,QAAQ,QAAR,CAApB;AACA,IAAII,eAAgBJ,QAAQ,eAAR,CAApB;AACA,IAAIK,aAAgBL,QAAQ,aAAR,CAApB;AACA,IAAIM,WAAgBN,QAAQ,UAAR,CAApB;AACA,IAAIO,WAAgBP,QAAQ,UAAR,CAApB;AACA,IAAIQ,SAAgBR,QAAQ,iBAAR,CAApB;AACA,IAAIS,gBAAgBT,QAAQ,yBAAR,CAApB;;AAEA,IAAIU,QAAiBV,QAAQ,mBAAR,CAArB;AACA,IAAIW,QAAiBX,QAAQ,mBAAR,CAArB;AACA,IAAIY,OAAiBZ,QAAQ,kBAAR,CAArB;;AAEA,IAAIa,MAAMd,SAAV;;AAEA,IAAIe,UAAU;AACVC,oBAAgBf,QAAQ,UAAR,CADN;AAEVgB,oBAAgB;AAFN,CAAd;;AAKAT,SAASU,OAAT,GAAmBC,OAAOD,OAA1B;AACAV,SAASY,OAAT,CAAiBX,OAAOY,EAAP,CAAUC,GAA3B,EAAgCP,OAAhC,EAAyCQ,IAAzC,CACI,YAAM;AACFC,YAAQC,GAAR,CAAY,oBAAZ;AACH,CAHL,EAIEC,KAJF,CAKI,UAACC,GAAD,EAAS;AACPH,YAAQI,KAAR,CAAc,iDAAiDD,GAA/D;AACD,CAPL;;AAUAb,IAAIe,GAAJ,CAAQtB,SAASuB,UAAT,EAAR;AACAhB,IAAIe,GAAJ,CAAQtB,SAASwB,OAAT,EAAR;;AAEA;AACAjB,IAAIkB,GAAJ,CAAQ,OAAR,EAAiB9B,KAAK+B,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACApB,IAAIkB,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACA;AACAlB,IAAIe,GAAJ,CAAQzB,OAAO,KAAP,CAAR;AACAU,IAAIe,GAAJ,CAAQvB,WAAW6B,IAAX,EAAR;AACArB,IAAIe,GAAJ,CAAQvB,WAAW8B,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAvB,IAAIe,GAAJ,CAAQxB,cAAR;AACAS,IAAIe,GAAJ,CAAQ7B,QAAQsC,MAAR,CAAepC,KAAK+B,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEApB,IAAIe,GAAJ,CAAQ,IAAR,EAAclB,KAAd;AACAG,IAAIe,GAAJ,CAAQ,SAAR,EAAmBhB,IAAnB;AACAC,IAAIe,GAAJ,CAAQ,UAAR,EAAoBjB,KAApB;;AAEA;AACAE,IAAIe,GAAJ,CAAQ,UAASU,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/B,QAAId,MAAM,IAAIe,KAAJ,CAAU,WAAV,CAAV;AACAf,QAAIgB,MAAJ,GAAa,GAAb;AACAF,SAAKd,GAAL;AACD,CAJD;;AAMA;AACAb,IAAIe,GAAJ,CAAQ,UAASF,GAAT,EAAcY,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC;AACAD,QAAII,MAAJ,CAAWC,OAAX,GAAqBlB,IAAIkB,OAAzB;AACAL,QAAII,MAAJ,CAAWhB,KAAX,GAAmBW,IAAIzB,GAAJ,CAAQgC,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCnB,GAAvC,GAA6C,EAAhE;;AAEA;AACAa,QAAIG,MAAJ,CAAWhB,IAAIgB,MAAJ,IAAc,GAAzB;AACAH,QAAIO,MAAJ,CAAW,OAAX;AACD,CARD;;AAUAC,OAAOC,OAAP,GAAiBnC,GAAjB","file":"app.js","sourcesContent":["var express       = require('express');\nvar path          = require('path');\nvar favicon       = require('serve-favicon');\nvar logger        = require('morgan');\nvar cookieParser  = require('cookie-parser');\nvar bodyParser    = require('body-parser');\nvar passport      = require('passport');\nvar mongoose      = require('mongoose');\nvar config        = require('./config/config');\nvar autoIncrement = require('mongoose-auto-increment');\n\nvar index          = require('./routes/v1/index');\nvar users          = require('./routes/v1/users');\nvar auth           = require('./routes/v1/auth');\n\nvar app = express();\n\nvar options = {\n    promiseLibrary: require('bluebird'),\n    useMongoClient: true\n};\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.db.url, options).then(\n    () => {\n        console.log('database connected');\n    }\n).catch(\n    (err) => {\n      console.error(\"cannot establish connection with database : \" + err);\n    }\n);\n\napp.use(passport.initialize());\napp.use(passport.session());\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/1', index);\napp.use('/1/auth', auth);\napp.use('/1/users', users);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}