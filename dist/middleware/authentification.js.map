{"version":3,"sources":["../../middleware/authentification.js"],"names":["passport","require","jwt","User","config","exports","isAuthenticated","req","res","next","token","getToken","headers","decoded","decode","opt","secret","exp","Date","now","status","send","message","findOne","id","err","user","isCurrentUser","params","e","console","log","authorization","parted","split","length"],"mappings":";;AAAA,IAAIA,WAAcC,QAAQ,UAAR,CAAlB;AACA,IAAIC,MAAcD,QAAQ,YAAR,CAAlB;AACA,IAAIE,OAAcF,QAAQ,qBAAR,CAAlB;AACA,IAAIG,SAAcH,QAAQ,kBAAR,CAAlB;;AAEAA,QAAQ,oBAAR,EAA8BD,QAA9B;;AAEAK,QAAQC,eAAR,GAA0B,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/C,QAAIC,QAAQC,SAASJ,IAAIK,OAAb,CAAZ;AACA,QAAIF,KAAJ,EAAW;AACP,YAAIG,UAAUX,IAAIY,MAAJ,CAAWJ,KAAX,EAAkBN,OAAOW,GAAP,CAAWC,MAA7B,CAAd;AACA,YAAIH,QAAQI,GAAR,IAAeC,KAAKC,GAAL,EAAnB,EAA+B;AAC3B,mBAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH;AACDnB,aAAKoB,OAAL,CAAa,EAACC,IAAIX,QAAQW,EAAb,EAAb,EAA+B,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC/C,gBAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,gBAAI,CAACC,IAAL,EAAW;AACP,uBAAOlB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH,aAJD,MAIO;AACHf,oBAAImB,IAAJ,GAAWA,IAAX;AACA,uBAAOjB,MAAP;AACH;AACJ,SAVD;AAWH,KAlBD,MAkBO;AACH,eAAOD,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH;AACJ,CAzBD;;AA2BAjB,QAAQsB,aAAR,GAAwB,UAASpB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC7C,QAAI;AACA,YAAI,CAACF,IAAImB,IAAT,EAAe;AACX,mBAAOlB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH;AACD,YAAIf,IAAIqB,MAAJ,CAAWJ,EAAX,IAAiBjB,IAAImB,IAAJ,CAASF,EAA9B,EAAkC;AAC9B,mBAAOhB,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH,SAJD,MAIO;AACH,mBAAOb,MAAP;AACH;AACJ,KAbD,CAaE,OAAOoB,CAAP,EAAU;AACRC,gBAAQC,GAAR,CAAYF,CAAZ;AACArB,YAAIa,IAAJ,CAAS,GAAT;AACH;AACJ,CAlBD;;AAoBAV,WAAW,kBAASC,OAAT,EAAkB;AACzB,QAAIA,WAAWA,QAAQoB,aAAvB,EAAsC;AAClC,YAAIC,SAASrB,QAAQoB,aAAR,CAAsBE,KAAtB,CAA4B,GAA5B,CAAb;AACA,YAAID,OAAOE,MAAP,KAAkB,CAAtB,EAAyB;AACrB,mBAAOF,OAAO,CAAP,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,KAPD,MAOO;AACH,eAAO,IAAP;AACH;AACJ,CAXD","file":"authentification.js","sourcesContent":["var passport    = require('passport')\nvar jwt         = require('jwt-simple');\nvar User        = require('../models/userModel');\nvar config      = require('../config/config');\n\nrequire('../config/passport')(passport);\n\nexports.isAuthenticated = function(req, res, next) {\n    var token = getToken(req.headers);\n    if (token) {\n        var decoded = jwt.decode(token, config.opt.secret);\n        if (decoded.exp <= Date.now()) {\n            return res.status(403).send({\n                message: 'Access token is expired'\n            });\n        }\n        User.findOne({id: decoded.id}, function(err, user) {\n            if (err) throw err;\n            if (!user) {\n                return res.status(403).send({\n                    message: 'Authentication failed. User not found'\n                });\n            } else {\n                req.user = user;\n                return next();\n            }\n        });\n    } else {\n        return res.status(403).send({\n            message: 'No token provided'\n        });\n    }\n};\n\nexports.isCurrentUser = function(req, res, next) {\n    try {\n        if (!req.user) {\n            return res.status(403).send({\n                message: 'Must be authenticate'\n            });\n        }\n        if (req.params.id != req.user.id) {\n            return res.status(403).send({\n                message: 'Uploading on forbidden user account for current authentication'\n            });\n        } else {\n            return next();\n        }\n    } catch (e) {\n        console.log(e);\n        res.send(500);\n    }\n};\n\ngetToken = function(headers) {\n    if (headers && headers.authorization) {\n        var parted = headers.authorization.split(' ');\n        if (parted.length === 2) {\n            return parted[1];\n        } else {\n            return null;\n        }\n    } else {\n        return null;\n    }\n};\n"]}